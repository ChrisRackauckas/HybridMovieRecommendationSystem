source('~/.active-rstudio-document')
dataTrain = read.csv("Data/ModelData/RRTrain.txt", sep=" ")
fit = lm(y~x1+x2,data=dataTrain)
summary(fit)
datacv = read.csv("Data/ModelData/RRCv", sep="\t")
predictions = predict(fit,datacv)
datacv = read.csv("Data/ModelData/RRCv", sep=" ")
predictions = predict(fit,datacv)
datacv = read.csv("Data/ModelData/RRCV", sep=" ")
datacv = read.csv("Data/ModelData/RRCV.txt", sep=" ")
predictions = predict(fit,datacv)
dataPredict read.csv("Data/ModelData/RRTest.txt", sep=" ")
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", sep=" ")
dataCV      = read.csv("Data/ModelData/RRCV.txt", sep=" ")
dataPredict = read.csv("Data/ModelData/RRTest.txt", sep=" ")
View(datacv)
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", sep="\t")
View(dataCV)
View(dataPredict)
View(dataTrain)
dataTrain   = read.table("Data/ModelData/RRTrain.txt", sep=" ")
dataCV      = read.table("Data/ModelData/RRCV.txt", sep=" ")
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", sep="\t")
dataCV      = read.csv("Data/ModelData/RRCV.txt", sep="\t")
dataPredict = read.csv("Data/ModelData/RRTest.txt", sep="\t")
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", header=TRUE, sep="\t")
dataCV      = read.csv("Data/ModelData/RRCV.txt", header=TRUE, sep="\t")
dataPredict = read.csv("Data/ModelData/RRTest.txt", header=TRUE, sep="\t")
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", header=TRUE, sep="\t")
dataCV      = read.csv("Data/ModelData/RRCV.txt", header=TRUE, sep="\t")
dataPredict = read.csv("Data/ModelData/RRTest.txt", header=TRUE, sep="\t")
fit = lm(y~x1+x2,data=dataTrain)
summary(fit)
predictions = predict(fit,dataCV)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
fit = lm(y~.,data=dataTrain)
summary(fit)
install.packages("MASS")
install.packages("ridge")
ls
fit = lm(y~.,data=dataTrain)
summary(fit)
predictions = predict(fit,dataCV)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
fit = linearRidge(y~.,data=dataTrain)
fit = linearRidge(y~.,data=dataTrain)
library(ridge)
library(MASS)
fit = linearRidge(y~.,data=dataTrain)
summary(fit)
autofit = linearRidge(y~.,data=dataTrain)
predictions = predict(autoFit,dataCV)
autoFit = linearRidge(y~.,data=dataTrain)
predictions = predict(autoFit,dataCV)
lambdaFits = lm.ridge(y~.,data=dataTrain, lambda=seq(0,10,1))
lambdaPredictions = predict(lambdaFits,dataCV)
lambdaPredictions$GCV
lambdaFits$GCV
lambdaPredictions = predict(lambdaFits,dataCV)
lambdaPredictions
lambdaFits
autoPrediction
autoPrediction = predict(autoFit,dataCV)
autoPrediction
fix(autoPrediction)
library(ridge)
library(MASS)
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", header=TRUE, sep="\t")
dataCV      = read.csv("Data/ModelData/RRCV.txt", header=TRUE, sep="\t")
dataPredict = read.csv("Data/ModelData/RRTest.txt", header=TRUE, sep="\t")
autoFit = linearRidge(y~.,data=dataTrain)
autoPrediction = predict(autoFit,dataCV)
autoPrediction[1]
autoPrediction[2]
autoPrediction[3]
View(dataCV)
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", header=TRUE, sep="\t")
dataCV      = read.csv("Data/ModelData/RRCV.txt", header=TRUE, sep="\t")
dataPredict = read.csv("Data/ModelData/RRTest.txt", header=TRUE, sep="\t")
autoFit = linearRidge(y~.,data=dataTrain)
autoPrediction = predict(autoFit,dataCV)
autoPrediction[0]
autoPrediction[1]
autoPrediction[2]
autoPrediction[3]
autoPrediction[4]
autoPrediction[5]
autoPrediction[6
autoPrediction[6]
autoPrediction[7]
autoPrediction[7]
autoPrediction[8]
fit = linearRidge(y~.,data=dataTrain,labmda=0)
fit = linearRidge(y~.,data=dataTrain,lambda=0)
autoPrediction = predict(autoFit,dataCV)
autoPreidction[0]
autoPreidction[1]
autoPrediction[1]
autoPrediction[2]
autoPrediction[3]
autoPrediction[4]
autoPrediction[5]
autoPrediction[6]
autoPrediction[7]
lmPrediction = predict(fitlm,dataCV)
### Fit the model
fitlm = lm(y~.,data=dataTrain,lambda=0)
fit = linearRidge(y~.,data=dataTrain,lambda=0)
lmPrediction = predict(fitlm,dataCV)
autoPrediction = predict(fit,dataCV)
fitlm = lm(y~.,data=dataTrain)
fit = linearRidge(y~.,data=dataTrain,lambda=0)
lmPrediction = predict(fitlm,dataCV)
autoPrediction = predict(fit,dataCV)
autoPrediction[0]
autoPrediction[1]
autoPrediction[2]
autoPrediction[3]
autoPrediction[4]
lmPrediction[0]
lmPrediction[1]
lmPrediction[2]
lmPrediction[3]
lmPrediction[4]
lmPrediction[5]
lmPrediction[6]
fit = linearRidge(y~.,data=dataTrain,lambda=seq(0,10,.1))
autoPrediction = predict(fit,dataCV)
autoPrediction = predict(fit[0],dataCV)
fix(fit)
fit = linearRidge(y~.,data=dataTrain,lambda=i)
prediction = predict(fit,dataCV)
fit = linearRidge(y~.,data=dataTrain)
prediction = predict(fit,dataCV)
fit = linearRidge(y~.,data=dataTrain,lambda=0)
prediction = predict(fit,dataCV)
actual = dataCV$y
rmse(actual,prediction)
install.packages("Metrics")
library(Metrics)
rmse(actual,prediction)
source('~/Documents/HybridMovieRecommendationSystem/Models/RModels/modelRRRun.R')
source('~/Documents/HybridMovieRecommendationSystem/Models/RModels/modelRRRun.R')
for(i in length(lambdas)){
fit = linearRidge(y~.,data=dataTrain,lambda=i)
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
## Saves first, second, and third so far
if(calc < rmseThird){
if(calc < rmseSecond){
if(calc < rmseBest){
rmseThird = rmseSecond
rmseSecond = rmseBest
rmseBest = calc
thidI = secondI
secondI = bestI
bestI = i
}else{
rmseThird=rmseSecond
rmseSecond=calc
thirdI = secondI
secondI = i
}
}else{
rmseThird = calc
thirdI=i
}
}
}
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[bestI])
prediction =  predict(fit,dataCV)
write(predictions, file ="Data/ModelPredictions/RR_CV_1.txt", ncolumns=1)
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[secondI])
prediction =  predict(fit,dataCV)
write(predictions, file ="Data/ModelPredictions/RR_CV_2.txt", ncolumns=1)
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[thirdI])
prediction =  predict(fit,dataCV)
write(predictions, file ="Data/ModelPredictions/RR_CV_3.txt", ncolumns=1)
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[bestI])
prediction =  predict(fit,dataCV)
write(predictions, file ="Data/ModelPredictions/RR_Test_1.txt", ncolumns=1)
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[secondI])
prediction =  predict(fit,dataCV)
write(predictions, file ="Data/ModelPredictions/RR_Test_2.txt", ncolumns=1)
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[thirdI])
source('~/Documents/HybridMovieRecommendationSystem/Models/RModels/modelRRRun.R')
source('~/Documents/HybridMovieRecommendationSystem/Models/RModels/modelRRRun.R')
source('~/Documents/HybridMovieRecommendationSystem/Models/RModels/modelRRRun.R')
for(i in 1:length(lambdas)){
}
source('~/.active-rstudio-document')
bestI
secondI
thirdI
fit = linearRidge(y~x1+x2+x1:x2,data=dataTrain,lambda=lambdas[bestI])
source('~/Documents/HybridMovieRecommendationSystem/Models/RModels/modelRRRun.R')
bestI
secondI
thirdI
source('~/Documents/HybridMovieRecommendationSystem/PostProcess/hybridRR.R')
source('~/Documents/HybridMovieRecommendationSystem/PostProcess/hybridRR.R')
fit = linearRidge(y~.,data=dataTrain,lambda=0)
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
calc
prediction[1]
prediction[2]
fit = linearRidge(y~x1+x2+x1:x2,data=dataTrain,lambda=lambdas[i])
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
dataTrain   = read.csv("Data/ModelData/RRTrain.txt", header=TRUE, sep="\t")
dataCV      = read.csv("Data/ModelData/RRCV.txt", header=TRUE, sep="\t")
dataPredict = read.csv("Data/ModelData/RRTest.txt", header=TRUE, sep="\t")
fit = linearRidge(y~x1+x2+x1:x2,data=dataTrain,lambda=lambdas[i])
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
## Saves first, second, and third so far
if(calc < rmseThird){
if(calc < rmseSecond){
if(calc < rmseBest){
rmseThird = rmseSecond
rmseSecond = rmseBest
rmseBest = calc
thidI = secondI
secondI = bestI
bestI = i
}else{
rmseThird=rmseSecond
rmseSecond=calc
thirdI = secondI
secondI = i
}
}else{
rmseThird = calc
thirdI=i
}
}
}
fit = linearRidge(y~x1+x2+x1:x2,data=dataTrain,lambda=lambdas[1])
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
fit = linearRidge(y~x1+x2+x1:x2,data=dataTrain,lambda=5)
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
dataTrain = read.csv("Data/Hybrid/hybridTrain.txt", sep="\t")
dataPredict = read.csv("Data/Hybrid/hybridPredict.txt", sep="\t")
actual = dataTrain$y
actual
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[i])
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
fit = linearRidge(y~x1+x2+x1:x2,data=dataTrain,lambda=0)
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
fit = linearRidge(y~x1+x2+x1:x2,data=dataTrain,lambda=3)
prediction = predict(fit,dataCV)
calc = rmse(actual,prediction)
prediction[0]
prediction[1]
prediction[2]
prediction[3]
prediction[4]
prediction[5]
View(dataTrain)
View(dataCV)
View(datacv)
View(dataPredict)
View(dataTrain)
View(dataPredict)
prediction = predict(fit,dataPredict)
calc = rmse(actual,prediction)
## Saves first, second, and third so far
if(calc<rmseBest){
rmseBest=calc
bestI=i
}
source('~/Documents/HybridMovieRecommendationSystem/PostProcess/hybridRR.R')
warnings()
source('~/Documents/HybridMovieRecommendationSystem/PostProcess/hybridRR.R')
bestI
bestI = 0
lambdas = seq(0,10,.1)
for(i in 1:length(lambdas)){
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[i])
prediction = predict(fit,dataTrain)
calc = rmse(actual,prediction)
## Saves first, second, and third so far
if(calc<rmseBest){
rmseBest=calc
bestI=i
}
}
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[bestI])
prediction =  predict(fit,dataCV)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
write(predictions, file ="Data/Hybrid/hybridSynthesized.txt", ncolumns=1)
bestI
lambdas = seq(0,10,.1)
for(i in 1:length(lambdas)){
fit = linearRidge(y~.,data=dataTrain,lambda=lambdas[i])
prediction = predict(fit,dataTrain)
calc = rmse(actual,prediction)
## Saves first, second, and third so far
if(calc<rmseBest){
rmseBest=calc
bestI=i
}
}
fit = linearRidge(y~.,data=dataTrain,lambda=0)
prediction = predict(fit,dataTrain)
calc = rmse(actual,prediction)
calc
source('~/Documents/HybridMovieRecommendationSystem/PostProcess/hybridRR.R')
